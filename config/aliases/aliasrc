#!/bin/zsh

# -----------------------------------------------------------------------
# functions
function source_mdl() {
  aliasdir=$HOME/.config/aliases
  source $aliasdir/$1.zsh
}

# -----------------------------------------------------------------------

# Neovim
command -v nvim >/dev/null && alias vim="nvim" vimdiff="nvim -d"

# Verbosity
alias cp="cp -iv"
alias mv="mv -iv"
alias rm="rm -v"
alias mkd="mkdir -pv"

# Colors
alias ls="ls -hN --color=auto --group-directories-first"
alias grep="grep --color=auto"
alias diff="diff --color=auto"

# Abbreviations
alias p="sudo pacman"
alias tf="terraform"

# Tools
alias todo="vim ~/TODO.md"
alias ckt="/home/vao/repos/local/gitlab.neasenergy.com/infrastructure/ckt/dist/ckt"

function octo() {
    docker run \
        -e OCTOPUS_CLI_API_KEY=$OCTOPUS_APIKEY \
        -e OCTOPUS_CLI_SERVER=https://octopus.neasenergy.com \
        -v $(pwd):/workdir -w /workdir \
        octopusdeploy/octo:latest $@
}

function kudeman() {
    docker run \
        -v $(pwd):/workdir \
        -u $(id -u ${USER}):$(id -g ${USER}) kudeman kudeman $@
}
function kudemani() {
    docker run -it \
        -v $(pwd):/workdir \
        -u $(id -u ${USER}):$(id -g ${USER}) kudeman bash
}

function gcilint() {
    url="https://gitlab.neasenergy.com"
    token=$GITLAB_API_KEY
    gitlab-ci-linter -v --gitlab-url $url --personal-access-token $token
}


function tfci() {
    image="cetaalaws-dkr.jfrog.io/cet-terraform:0.13.2-awscli"
    docker run \
        -it \
        -v $(pwd):/workdir \
        -w /workdir \
        -v $HOME/.aws:/root/.aws \
        --env="AWS_PROFILE=$AWS_PROFILE" \
        --env="MONGODB_ATLAS_PUBLIC_KEY=$MONGODB_ATLAS_PUBLIC_KEY" \
        --env="MONGODB_ATLAS_PRIVATE_KEY=$MONGODB_ATLAS_PRIVATE_KEY" \
        --env="GITLAB_TOKEN=$GITLAB_TOKEN" \
        --env="GITLAB_HOST=$GITLAB_HOST" \
        --env="ARTIFACTORY_URL=$ARTIFACTORY_URL" \
        --env="ARTIFACTORY_API_KEY=$ARTIFACTORY_API_KEY" \
        --entrypoint="sh" \
        $image #\
        # $@
}

function kubeunseal {
    tmpmem="$HOME/.kubeunseal/$(cat /dev/urandom | tr -dc a-z0-9 | head -c 6)"
    mkdir -p $tmpmem

    if ! grep -qs "$tmpmem" /proc/mounts;
    then
        sudo mount tmpfs $tmpmem -t tmpfs -o size=1G
    fi

    keySecrets=$(kubectl get secret -n kube-system --no-headers=true | awk '/sealed-secrets-key.*/{print $1}')
    keyFiles=""
    for s in $keySecrets
    do
        kubectl get secret $s -n kube-system -o yaml > "$tmpmem/$s.yaml"
        keyFiles+="$tmpmem/$s.yaml,"
    done
    keyFiles=$(echo "${keyFiles%?}")
    if [ -z "$2" ]
    then
      unsealed=$(kubeseal --recovery-unseal --recovery-private-key $keyFiles -o yaml < $1)
      echo $unsealed
    else
      unsealed=$(kubeseal --recovery-unseal --recovery-private-key $keyFiles < $1)
      echo $unsealed | jq -r ".data.\"$2\"" | base64 -d ; echo ''
    fi
    sudo umount $tmpmem
}

# Utils
alias vs="find-and-open-vs-sln"

function awslogin() {
    aws sso login --profile _login
}

function awp() {
  if [[ "$1" == "--resume" || "$1" == "-r" ]]
  then
    export VALORL_AWS_PROFILE_HOOK_SUSPEND=0
  else
    echo "suspending"
    export VALORL_AWS_PROFILE_HOOK_SUSPEND=1
    source ~/.scripts/source-aws-profile.sh
  fi
}

alias rp=repos
function repos() {
  dir_count=0
  dest=$( [[ $1 = "-s" ]] && echo "$REPOS/shared" || echo "$REPOS/local" )
  selected=$(for d in $(find-repo-v2 $dest); do
      pretty=$(echo $d | cut -d'/' -f7-)
      echo "$d $pretty"
  done | fzf +m \
      --with-nth 2.. \
      --layout=reverse \
      --height 10 \
      --select-1 \
      --query "$1")
  echo $selected | {
      read first _
      [[ "$first" == "" ]] && return 1
      cd $first
      if [ -n "$TMUX" ]; then
          current_window="$(tmux display-message -p '#I')"
          name="$(echo "$first" | rev | cut -d / -f1,2 | rev)"
          tmux rename-window -t "$current_window" "$name"
      fi
  }
}


function get_sops_key() {
    local start_dir="$(pwd)"
    local envs_base="$REPOS/local/gitlab.neasenergy.com/infrastructure/terraform/envs"
    local env=$1

    local cache="$HOME/.cache/valorl/sops_key_$env"
    if [ -f "$cache" ]; then
        cat $cache
        return 0
    fi

    if [ "$start_dir" = "$envs_base/$env" ]; then
        pushd "${envs_base}/$env" > /dev/null
    fi

    local query='.resources[] | select(.type=="aws_kms_key") | select(.name=="sops") | .instances[].attributes.arn'
    local arn=$(AWS_PROFILE=$env tf state pull | jq -r "$query")

    if [[ ! -z "$arn" ]]; then
        echo $arn > "$HOME/.cache/valorl/sops_key_$env"
        echo $arn
    else
        echo "SOPS key ARN not found for '$env'"
    fi

    if [ "$start_dir" = "$envs_base/$env" ]; then
        popd > /dev/null
    fi
}

# Modules
source_mdl git
source_mdl kubectl
source_mdl kubie
source_mdl editconfig
source_mdl dotnet
source_mdl tmux
source_mdl k9s
source_mdl terraform

